# Copyright (C) <year> <author>
{%- if docstrings -%}
{{ docstrings }}
{%- endif -%}

# TODO: Remove redundant imports
# TODO: Update Copyright information
# TODO: Add a README file
# TODO: Keep in mind that the variables `doc` and `op` are no longer globally available

{%- if future_import -%}
{{ future_import }}
{%- endif -%}
import c4d
import os

{%- if symbol_mode == 'c4d' -%}

#
# Note: It is NOT recommended to use the Cinema 4D module to access your
# plugin's resource symbols. The C4DDev project contains tools that can
# parse resource files and generate Python code with all the symbols.
#
#   See https://github.com/NiklasRosenstein/c4ddev
#
res = c4d

{%- elif symbol_mode == 'c4ddev' -%}

#
# Note: Check out the C4DDev project which contains tools that can parse
# resource files and generate Python code with all the symbols, similar to
# what you can see below.
#
#   See https://github.com/NiklasRosenstein/c4ddev
class res(object):
  {%- if not parameters -%}
  pass
  {%- endif -%}
  {%- for node, did, bc in parameters -%}
  {{ node['symbol'][0] }} = {{ node['symbol'][1] }}
  {%- for item in (node['cycle_symbols'] or ()) -%}
  {{ item[0] }} = {{ item[1] }}
  {%- endfor -%}
  {%- endfor -%}
res = res()

{%- endif -%}
{%- if plugin_icon -%}

def load_bitmap(path):
  path = os.path.join(os.path.dirname(__file__), path)
  bmp = c4d.bitmaps.BaseBitmap()
  if bmp.InitWith(path)[0] != c4d.IMAGERESULT_OK:
    bmp = None
  return bmp

{%- endif -%}
{%- if global_code -%}

{{ global_code }}

{%- endif -%}

class {{ plugin_class }}(c4d.plugins.{{ plugin_type }}Data):

  PLUGIN_ID = {{ plugin_id }}
  PLUGIN_NAME = {{ repr(plugin_name) }}
  PLUGIN_INFO = {{ plugin_info or '0' }} {%- if plugin_type == 'Tag' %}| c4d.TAG_VISIBLE{% endif %}
  PLUGIN_DESC = {{ repr(plugin_desc) }}
  PLUGIN_ICON = {{ 'load_bitmap({!r})'.format(plugin_icon) if plugin_icon else 'None' }}
  PLUGIN_DISKLEVEL = 0

  @classmethod
  def Register(cls):
    return c4d.plugins.Register{{ plugin_type }}Plugin(
      {%- if plugin_type == 'Object' -%}
      cls.PLUGIN_ID, cls.PLUGIN_NAME, cls, cls.PLUGIN_DESC, cls.PLUGIN_INFO,
      cls.PLUGIN_ICON, cls.PLUGIN_DISKLEVEL)
      {%- elif plugin_type == 'Tag' -%}
      cls.PLUGIN_ID, cls.PLUGIN_NAME, cls.PLUGIN_INFO, cls, cls.PLUGIN_DESC,
      cls.PLUGIN_ICON, cls.PLUGIN_DISKLEVEL)
      {%- elif plugin_type == 'Shader' -%}
      cls.PLUGIN_ID, cls.PLUGIN_NAME, cls.PLUGIN_INFO, cls, cls.PLUGIN_DESC,
      cls.PLUGIN_DISKLEVEL)
      {%- endif -%}

  {%- if plugin_type == 'Object' and link[c4d.OPYTHON_OPTIMIZE] -%}
  def __init__(self):
    self.SetOptimizeCache(True)

  {%- endif -%}
  def Init(self, node):
    {%- for node, did, bc in parameters -%}
    {%- if did[-1].dtype == c4d.DTYPE_BOOL -%}
    self.InitAttr(node, bool, [res.{{ node['symbol'][0] }}])
    {%- elif did[-1].dtype == c4d.DTYPE_LONG -%}
    self.InitAttr(node, int, [res.{{ node['symbol'][0] }}])
    {%- elif did[-1].dtype == c4d.DTYPE_REAL -%}
    self.InitAttr(node, float, [res.{{ node['symbol'][0] }}])
    {%- elif did[-1].dtype in (c4d.DTYPE_COLOR, c4d.DTYPE_VECTOR) -%}
    self.InitAttr(node, c4d.Vector, [res.{{ node['symbol'][0] }}])
    {%- elif did[-1].dtype == c4d.DTYPE_BASELISTLINK -%}
    self.InitAttr(node, c4d.BaseList2D, [res.{{ node['symbol'][0] }}])
    {%- elif did[-1].dtype == c4d.CUSTOMDATATYPE_INEXCLUDE_LIST -%}
    self.InitAttr(node, c4d.InExcludeData, [res.{{ node['symbol'][0] }}])
    {%- elif did[-1].dtype == c4d.CUSTOMDATATYPE_GRADIENT -%}
    self.InitAttr(node, c4d.Gradient, [res.{{ node['symbol'][0] }}])
    {%- elif did[-1].dtype == c4d.CUSTOMDATATYPE_SPLINE -%}
    self.InitAttr(node, c4d.SplineData, [res.{{ node['symbol'][0] }}])
    {%- endif -%}
    {%- endfor -%}

    {%- for node, did, bc in parameters -%}
    {%- if did[-1].dtype == c4d.DTYPE_BOOL -%}
    node[res.{{ node['symbol'][0] }}] = {{ bool(bc[c4d.DESC_DEFAULT]) }}
    {%- elif did[-1].dtype == c4d.DTYPE_LONG and bc.GetType(c4d.DESC_DEFAULT) == c4d.DTYPE_LONG -%}
    node[res.{{ node['symbol'][0] }}] = {{ bc[c4d.DESC_DEFAULT] }}
    {%- elif did[-1].dtype == c4d.DTYPE_REAL and bc.GetType(c4d.DESC_DEFAULT) == c4d.DTYPE_REAL -%}
    node[res.{{ node['symbol'][0] }}] = {{ bc[c4d.DESC_DEFAULT] }}
    {%- elif did[-1].dtype == c4d.DTYPE_VECTOR and bc.GetType(c4d.DESC_DEFAULT) == c4d.DTYPE_VECTOR -%}
    node[res.{{ node['symbol'][0] }}] = c4d.{{ bc[c4d.DESC_DEFAULT] }}
    {%- endif -%}
    {%- endfor -%}
    return True

  {%- if hardcoded_description -%}
  def GetDDescription(self, node, desc, flags):
    if not desc.LoadDescription(node.GetType()):
      return False
    singleid = desc.GetSingleDescID()
    {%- for node, params in hardcoded_description -%}
    if not singleid or singleid == res.{{ node['symbol'][0] }}:
      bc = desc.GetParameterI(res.{{ node['symbol'][0] }}, None)
      {%- for param, value in params -%}
      bc[{{ param }}] = {{ repr(value) }}
      {%- endfor -%}
    {%- endfor -%}
    return (True, flags | c4d.DESCFLAGS_DESC_LOADED)

  {%- endif -%}
  {%- if member_code -%}
{{ member_code }}
  {%- endif -%}

if __name__ == '__main__':
  {{ plugin_class }}.Register()
